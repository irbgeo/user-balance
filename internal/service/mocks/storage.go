// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/irbgeo/user-balance/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the storage type
type Storage struct {
	mock.Mock
}

// ChangeBalance provides a mock function with given fields: ctx, c
func (_m *Storage) ChangeBalance(ctx context.Context, c service.BalanceChange) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.BalanceChange) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: ctx, u
func (_m *Storage) GetBalance(ctx context.Context, u service.User) (service.Balance, error) {
	ret := _m.Called(ctx, u)

	var r0 service.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.User) (service.Balance, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.User) service.Balance); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(service.Balance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBalance provides a mock function with given fields: ctx, b
func (_m *Storage) SetBalance(ctx context.Context, b service.Balance) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.Balance) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
